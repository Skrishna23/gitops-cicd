name: Property Release Automation - NaaP

on:
  workflow_dispatch:
    inputs:
      BASE_PATH:
        description: "Base path for the release folder"
        required: true
        type: string

jobs:
  update_properties:
    runs-on: ubuntu-latest
    env:
      GITOPS_REPO: "Skrishna23/Project_NaaP"  # ðŸ”¹ GitOps repository
      RELEASE_BRANCH: "Release-branch"              # ðŸ”¹ Branch containing the release folder
      PROPERTIES_BRANCH: "dev-properties"     # ðŸ”¹ Branch containing the properties folder

    steps:
      - name: Checkout CICD Repository (This Repo)
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Clone GitOps Repository
        run: |
          set -e
          echo "Cloning GitOps repository '${{ env.GITOPS_REPO }}'..."
          git clone --depth 1 https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ env.GITOPS_REPO }}.git gitops-repo
          cd gitops-repo

          # Validate if the Release branch exists
          if ! git ls-remote --exit-code --heads origin "${{ env.RELEASE_BRANCH }}"; then
            echo "::error::[ERROR] Release branch '${{ env.RELEASE_BRANCH }}' does not exist!"
            exit 1
          fi

          echo "::notice::[SUCCESS] GitOps repository cloned."

      - name: Fetch & Checkout Release Folder from Release Branch
        run: |
          set -e
          cd gitops-repo

          echo "DEBUG: BASE_PATH='${{ github.event.inputs.BASE_PATH }}'"
          echo "DEBUG: RELEASE_BRANCH='${{ env.RELEASE_BRANCH }}'"

          if [ -z "${{ github.event.inputs.BASE_PATH }}" ]; then
            echo "::error::[ERROR] BASE_PATH is empty! Ensure you provide it as input."
            exit 1
          fi

          git fetch origin "${{ env.RELEASE_BRANCH }}"
          git checkout "${{ env.RELEASE_BRANCH }}"

          if [ ! -d "${{ github.event.inputs.BASE_PATH }}" ]; then
            echo "::error::[ERROR] Release folder '${{ github.event.inputs.BASE_PATH }}' does not exist in branch '${{ env.RELEASE_BRANCH }}'!"
            exit 1
          fi

          echo "::notice::[SUCCESS] Checked out release folder from '${{ env.RELEASE_BRANCH }}'."

      - name: Fetch & Checkout Properties Folder from Properties Branch
        run: |
          set -e
          cd gitops-repo

          git fetch origin "${{ env.PROPERTIES_BRANCH }}"
          git checkout "${{ env.PROPERTIES_BRANCH }}"

          if [ ! -d "." ]; then
            echo "::error::[ERROR] Properties branch '${{ env.PROPERTIES_BRANCH }}' is empty or missing required files!"
            exit 1
          fi

          echo "::notice::[SUCCESS] Checked out properties folder from '${{ env.PROPERTIES_BRANCH }}'."

      - name: Process Property File Changes
        run: |
          set -e
          BASE_PATH="../gitops-repo/${{ github.event.inputs.BASE_PATH }}"
          PROPERTIES_PATH="../gitops-repo"
          LOG_FILE="property_changes.log"

          echo "Processing changes from $BASE_PATH..." > $LOG_FILE

          for FILE_PATH in $(find "$BASE_PATH" -type f ! -name "*.*"); do
            FILE_NAME=$(basename "$FILE_PATH")
            PROPERTY_FILE="$PROPERTIES_PATH/$FILE_NAME.properties"

            if [ ! -f "$PROPERTY_FILE" ]; then
              echo "::error::[ERROR] Matching property file '$PROPERTY_FILE' not found. Workflow failed!" | tee -a $LOG_FILE
              exit 1
            fi

            echo "[INFO] Applying changes from $FILE_PATH to $PROPERTY_FILE" >> $LOG_FILE

            TEMP_FILE="${PROPERTY_FILE}.tmp"
            cp "$PROPERTY_FILE" "$TEMP_FILE"

            SECTION=""
            while IFS= read -r line; do
              [[ -z "$line" || "$line" =~ ^# ]] && continue

              case "$line" in
                "[ADD]") SECTION="ADD"; continue ;;
                "[UPDATE]") SECTION="UPDATE"; continue ;;
                "[REMOVE]") SECTION="REMOVE"; continue ;;
              esac

              if [[ "$SECTION" == "ADD" ]]; then
                KEY=$(echo "$line" | cut -d= -f1)

                if grep -q "^$KEY=" "$TEMP_FILE"; then
                  echo "::error::[ERROR] Key '$KEY' already exists in $PROPERTY_FILE. Workflow failed!" | tee -a $LOG_FILE
                  exit 1
                fi

                echo "$line" >> "$TEMP_FILE"
                echo "[ADD] Added: $line in $PROPERTY_FILE" >> $LOG_FILE

              elif [[ "$SECTION" == "UPDATE" ]]; then
                KEY=$(echo "$line" | cut -d= -f1)
                VALUE=$(echo "$line" | cut -d= -f2-)

                if ! grep -q "^$KEY=" "$TEMP_FILE"; then
                  echo "::error::[ERROR] Key '$KEY' not found in $PROPERTY_FILE for update. Workflow failed!" | tee -a $LOG_FILE
                  exit 1
                fi

                OLD_VALUE=$(grep "^$KEY=" "$TEMP_FILE" | cut -d= -f2-)

                if [[ "$OLD_VALUE" == "$VALUE" ]]; then
                  echo "::error::[ERROR] Key '$KEY' in $PROPERTY_FILE already has the same value. No change detected. Workflow failed!" | tee -a $LOG_FILE
                  exit 1
                fi

                sed -i "s|^$KEY=.*|$KEY=$VALUE|" "$TEMP_FILE"
                echo "[UPDATE] Updated: $KEY=$VALUE in $PROPERTY_FILE" >> $LOG_FILE

              elif [[ "$SECTION" == "REMOVE" ]]; then
                KEY=$(echo "$line" | cut -d= -f1)

                if ! grep -q "^$KEY=" "$TEMP_FILE"; then
                  echo "::error::[ERROR] Key '$KEY' not found in $PROPERTY_FILE for removal. Workflow failed!" | tee -a $LOG_FILE
                  exit 1
                fi

                sed -i "/^$KEY=/d" "$TEMP_FILE"
                echo "[DELETE] Removed: $KEY from $PROPERTY_FILE" >> $LOG_FILE
              fi
            done < "$FILE_PATH"

            mv "$TEMP_FILE" "$PROPERTY_FILE"
          done

      - name: Display Logs
        run: cat property_changes.log

      - name: Commit and Push Changes to Properties Branch
        run: |
          cd gitops-repo
          git add -u

          if git diff --cached --quiet; then
            echo "No changes detected, skipping commit."
          else
            git commit -m "Updated properties from release: ${{ github.event.inputs.BASE_PATH }}"
            git push origin "${{ env.PROPERTIES_BRANCH }}"
          fi
