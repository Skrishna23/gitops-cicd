name: Property Release Automation - NaaP

on:
  workflow_dispatch:
    inputs:
      ENVIRONMENT:
        description: "Target environment (e.g., dev, staging, prod)"
        required: true
        type: string
      BASE_PATH:
        description: "Base path for the release folder"
        required: true
        type: string
      GITOPS_REPO:
        description: "GitHub repository where properties & release folder exist (owner/repo)"
        required: true
        type: string
      GITOPS_BRANCH:
        description: "Branch in GitOps repo for the environment"
        required: true
        type: string

jobs:
  update_properties:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout CICD Repository (This Repo)
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Clone GitOps Repository (Properties & Release Folder)
        run: |
          set -e
          GITOPS_REPO="${{ github.event.inputs.GITOPS_REPO }}"
          GITOPS_BRANCH="${{ github.event.inputs.GITOPS_BRANCH }}"
          BASE_PATH="${{ github.event.inputs.BASE_PATH }}"

          echo "Cloning GitOps repository '$GITOPS_REPO' (Branch: '$GITOPS_BRANCH')..."
          git clone --depth 1 --branch "$GITOPS_BRANCH" https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/"$GITOPS_REPO".git gitops-repo

          cd gitops-repo

          if [ ! -d "$BASE_PATH" ]; then
            echo "::error::[ERROR] Release folder '$BASE_PATH' does not exist in branch '$GITOPS_BRANCH'!"
            exit 1
          fi

          echo "::notice::[SUCCESS] Successfully cloned GitOps repo and found '$BASE_PATH'."

      - name: Process Property File Changes
        run: |
          set -e
          BASE_PATH="gitops-repo/${{ github.event.inputs.BASE_PATH }}"
          FULL_PATH="$GITHUB_WORKSPACE/$BASE_PATH"
          LOG_FILE="property_changes.log"

          echo "Processing changes from $FULL_PATH..." > $LOG_FILE

          for FILE_PATH in $(find "$FULL_PATH" -type f -name "*.properties"); do
            FILE_NAME=$(basename "$FILE_PATH")

            if [ ! -f "$FILE_NAME" ]; then
              echo "::error::[ERROR] Property file '$FILE_NAME' does not exist. Workflow failed!" | tee -a $LOG_FILE
              exit 1
            fi

            echo "[INFO] Applying changes from $FILE_PATH to $FILE_NAME" >> $LOG_FILE

            TEMP_FILE="${FILE_NAME}.tmp"
            cp "$FILE_NAME" "$TEMP_FILE"

            SECTION=""
            while IFS= read -r line; do
              [[ -z "$line" || "$line" =~ ^# ]] && continue

              case "$line" in
                "[ADD]") SECTION="ADD"; continue ;;
                "[UPDATE]") SECTION="UPDATE"; continue ;;
                "[REMOVE]") SECTION="REMOVE"; continue ;;
              esac

              if [[ "$SECTION" == "ADD" ]]; then
                KEY=$(echo "$line" | cut -d= -f1)

                if grep -q "^$KEY=" "$TEMP_FILE"; then
                  echo "::error::[ERROR] Key '$KEY' already exists in $FILE_NAME. Workflow failed!" | tee -a $LOG_FILE
                  exit 1
                fi

                echo "$line" >> "$TEMP_FILE"
                echo "[ADD] Added: $line in $FILE_NAME" >> $LOG_FILE

              elif [[ "$SECTION" == "UPDATE" ]]; then
                KEY=$(echo "$line" | cut -d= -f1)
                VALUE=$(echo "$line" | cut -d= -f2-)

                if ! grep -q "^$KEY=" "$TEMP_FILE"; then
                  echo "::error::[ERROR] Key '$KEY' not found in $FILE_NAME for update. Workflow failed!" | tee -a $LOG_FILE
                  exit 1
                fi

                OLD_VALUE=$(grep "^$KEY=" "$TEMP_FILE" | cut -d= -f2-)

                if [[ "$OLD_VALUE" == "$VALUE" ]]; then
                  echo "::error::[ERROR] Key '$KEY' in $FILE_NAME already has the same value. No change detected. Workflow failed!" | tee -a $LOG_FILE
                  exit 1
                fi

                sed -i "s|^$KEY=.*|$KEY=$VALUE|" "$TEMP_FILE"
                echo "[UPDATE] Updated: $KEY=$VALUE in $FILE_NAME" >> $LOG_FILE

              elif [[ "$SECTION" == "REMOVE" ]]; then
                KEY=$(echo "$line" | cut -d= -f1)

                if ! grep -q "^$KEY=" "$TEMP_FILE"; then
                  echo "::error::[ERROR] Key '$KEY' not found in $FILE_NAME for removal. Workflow failed!" | tee -a $LOG_FILE
                  exit 1
                fi

                sed -i "/^$KEY=/d" "$TEMP_FILE"
                echo "[DELETE] Removed: $KEY from $FILE_NAME" >> $LOG_FILE
              fi
            done < "$FILE_PATH"

            mv "$TEMP_FILE" "$FILE_NAME"
          done

      - name: Display Logs
        run: cat property_changes.log

      - name: Commit and Push Changes to GitOps Repository
        run: |
          cd gitops-repo
          git add -u

          if git diff --cached --quiet; then
            echo "No changes detected, skipping commit."
          else
            git commit -m "Updated properties for ${{ github.event.inputs.ENVIRONMENT }} environment"
            git push origin ${{ github.event.inputs.GITOPS_BRANCH }}
          fi
